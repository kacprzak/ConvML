require 'nokogiri'
require 'logger'
require './multiio.rb'

File.delete("test.log") if File.exists?("test.log")
log_file = File.open("test.log", "w")
@@log = Logger.new(MultiIO.new(log_file, STDOUT))
@@log.formatter = proc do |severity, datetime, progmane, msg|
  "#{severity}: #{msg}\n"
end

task :default => [:test]

task :test do
  # Test szablonu
  validate "../convml_11_template.xml"
  
  # Testuje poprawne dokumenty
  Rake::FileList.new("*.xml").exclude("*Fail.xml").each do |f|
    validate f
  end
  
  # Testuje dokumenty z bledami
  Rake::FileList.new("*Fail.xml").each do |f|
    validate f, false
  end
end

def validate(file, shouldBeValid=true)
  schema = "../convml_11.xsd"
  if Rake::Win32::windows?
    validateWithRuby schema, file, shouldBeValid
  else
    validateWithXmllint schema, file, shouldBeValid
  end
end

def validateWithXmllint(schema, file, shouldBeValid=true)
  sh "xmllint --noout --schema #{schema} #{file} 2> test.log" do |ok, res|
    if !ok && shouldBeValid
      sh "cat test.log"
    elsif ok && !shouldBeValid
      puts "WARNING: #{file} should not be vaild!"
    end
  end
end

def validateWithRuby(schema, file, shouldBeValid=true)
  @@log.info "validating #{file}"
  xsd = Nokogiri::XML::Schema(File.read(schema))
  doc = Nokogiri::XML(File.read(file))
  errors = xsd.validate(doc)
  
  if errors.any? && shouldBeValid   
    errors.each {|e| @@log.fatal e }
    @@log.warn "#{errors.size} errors in #{file}"
  elsif errors.empty? && !shouldBeValid
    @@log.fatal "#{file} should not be valid!"
  end
end
