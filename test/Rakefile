require 'nokogiri'
require 'logger'
require './multiio.rb'

LOG_FILE = "test.log"
File.delete(LOG_FILE) if File.exists?(LOG_FILE)
log_file = File.open(LOG_FILE, "w")
LOG = Logger.new(MultiIO.new(log_file, STDOUT))
LOG.formatter = proc do |severity, datetime, progname, msg|
  "#{severity}: #{msg}\n"
end

task :default => [:test]

task :test => ["convml_11_sch-compiled.xsl"] do
  err_count = 0
  # Test szablonu
  err_count += validate "../convml_11_template.xml"
  
  # Testuje poprawne dokumenty
  Rake::FileList.new("*.xml").exclude("*Fail.xml").each do |f|
    err_count += validate f
  end
  
  # Testuje dokumenty z bledami
  Rake::FileList.new("*Fail.xml").each do |f|
    err_count += validate f, false
  end
  
  LOG.info
  if err_count == 0
    LOG.info "TEST SUCCESSFUL"
  else
    LOG.info "TEST FAILED!"
    LOG.info "#{err_count} errors"
  end
end

def validate(file, shouldBeValid=true)
  LOG.info "validating #{file}"

  errors = xsd_validate file
  errors += schematron file

  if errors.any? && shouldBeValid   
    errors.each {|e| LOG.fatal e }
    LOG.warn "#{errors.size} errors in #{file}"
    return errors.size
  elsif errors.empty? && !shouldBeValid
    LOG.fatal "#{file} should not be valid!"
    return 1
  end
  return 0
end

def xsd_validate(file)
  schema = "../convml_11.xsd"
  xsd = Nokogiri::XML::Schema(File.read(schema))
  doc = Nokogiri::XML(File.read(file))
  errors = xsd.validate(doc)  
end

def rule_hints(results_doc, instance_doc, rule_type='failed-assert')
  results = []

  results_doc.xpath("//svrl:#{rule_type}").each do |hit|
    context = instance_doc.xpath(hit['location']).first
    
    hit.xpath('svrl:text/text()').each do |message|
      results << {
        :rule_type => rule_type,
        #:type => context.node_type_name,
        :name => context.name,
        :line => context.line,
        :message => message.content.strip }
    end
  end
  results  
end

def schematron(file)
  xsl = Nokogiri::XSLT(File.read('convml_11_sch-compiled.xsl'))
  doc = Nokogiri::XML(File.read(file))

  report = xsl.transform(doc)
  rule_hints(report, doc, 'successful-report').each {|r| LOG.info r}
  errors = rule_hints(report, doc)
end

file "convml_11_sch-compiled.xsl" => ["../convml_11.sch"] do
  LOG.info "compiling ../convml_11.sch"
  xsl = Nokogiri::XSLT(File.open('../ISO_Schematron/iso_svrl_for_xslt1.xsl', 'r'))
  doc = Nokogiri::XML(File.read('../convml_11.sch'))

  File.open("convml_11_sch-compiled.xsl", "w") do |f|
    f.puts xsl.transform(doc)
  end
end

